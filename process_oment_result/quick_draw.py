import math
from collections import defaultdict
from operator import itemgetter
from pprint import pprint

from matplotlib import pyplot as plt
import numpy as np


def drawImage():
    # result, text = nodes50result, "Długość i szerokość obszaru [m]"
    # result, text = nodes100result, "Długość i szerokość obszaru [m]"
    result, text = leaderRepeatsRW, "Parameter rozpadu klastra"
    val = list(result.keys())

    values = []
    stdErr = []
    for a in result.values():
        values.append(a[0])
        stdErr.append(a[1])

    plt.errorbar(val, values, stdErr, linestyle='None', marker='^')

    plt.ylabel("Udane połączenia [%]")
    plt.xlabel(text)

    mi = min(val)
    ma = math.ceil(max(val)) + 1
    yint = range(mi, ma, (ma - mi) // (len(val) - 1))
    plt.xticks(yint)
    plt.ylim(50, 100)

    # plt.savefig('output.png', dpi=200)
    plt.show()


regexp = r"""
.*areaMaxP=(\d+).*?(\d+\.\d+)\W*STD =\W*(\d+\.\d+)\W*(\d+\.\d+)$
$1: ($2, $3),
"""
nodes50result = {
    60: (98.42, 2.38),
    70: (97.64, 3.42),
    80: (97.19, 4.00),
    90: (95.81, 5.34),
    100: (95.41, 4.37),
    110: (91.23, 6.51),
    120: (88.90, 9.01),
    130: (83.68, 9.84),
    140: (85.96, 9.66),
    150: (85.67, 11.52),
    160: (78.19, 12.86),
    170: (77.44, 9.16),
    180: (74.62, 13.42),
    190: (61.44, 13.09),
    200: (65.04, 14.03),
}

nodes100result = {
    60: (99.03, 1.85),
    70: (98.58, 2.72),
    80: (96.12, 4.18),
    90: (94.53, 4.80),
    100: (93.12, 5.57),
    110: (89.46, 7.07),
    120: (90.84, 6.86),
    130: (86.30, 8.64),
    140: (83.53, 11.51),
    150: (84.52, 8.96),
    160: (82.31, 9.82),
    170: (77.98, 10.05),
    180: (77.79, 12.47),
    190: (76.13, 10.61),
    200: (72.78, 13.28),
}
r = """
.*?(\d+\.?\d*)
$1, 
"""
timeParam_old = [
    (4, 3, 1, 50, 200, 57.90, 10.70, 0.18,),
    (4, 3, 2, 50, 200, 55.77, 12.46, 0.22,),
    (4, 3, 3, 50, 200, 63.42, 8.56, 0.13,),
    (4, 4, 1, 50, 200, 53.65, 9.43, 0.18,),
    (4, 4, 2, 50, 200, 60.76, 9.38, 0.15,),
    (4, 4, 3, 50, 200, 56.33, 11.29, 0.20,),
    (4, 4, 4, 50, 200, 50.52, 10.62, 0.21,),
    (6, 3, 1, 50, 200, 56.87, 13.20, 0.23,),
    (6, 3, 2, 50, 200, 58.19, 11.60, 0.20,),
    (6, 3, 3, 50, 200, 55.10, 12.65, 0.23,),
    (6, 4, 1, 50, 200, 59.46, 13.20, 0.22,),
    (6, 4, 2, 50, 200, 50.87, 10.30, 0.20,),
    (6, 4, 3, 50, 200, 58.21, 12.36, 0.21,),
    (6, 4, 4, 50, 200, 53.14, 9.14, 0.17,),
    (6, 5, 1, 50, 200, 48.43, 10.71, 0.22,),
    (6, 5, 2, 50, 200, 62.45, 9.38, 0.15,),
    (6, 5, 3, 50, 200, 58.03, 7.65, 0.13,),
    (6, 5, 4, 50, 200, 50.68, 8.95, 0.18,),
    (6, 6, 1, 50, 200, 51.99, 9.82, 0.19,),
    (6, 6, 2, 50, 200, 48.15, 10.32, 0.21,),
    (6, 6, 3, 50, 200, 51.37, 9.94, 0.19,),
    (6, 6, 4, 50, 200, 48.51, 8.03, 0.17,),
    (8, 3, 1, 50, 200, 45.71, 11.85, 0.26,),
    (8, 3, 2, 50, 200, 49.76, 11.74, 0.24,),
    (8, 3, 3, 50, 200, 50.90, 11.91, 0.23,),
    (8, 4, 1, 50, 200, 48.08, 10.33, 0.21,),
    (8, 4, 2, 50, 200, 45.42, 10.66, 0.23,),
    (8, 4, 3, 50, 200, 48.60, 10.77, 0.22,),
    (8, 4, 4, 50, 200, 50.01, 9.54, 0.19,),
    (8, 5, 1, 50, 200, 43.64, 11.27, 0.26,),
    (8, 5, 2, 50, 200, 48.85, 10.72, 0.22,),
    (8, 5, 3, 50, 200, 59.50, 10.27, 0.17,),
    (8, 5, 4, 50, 200, 52.57, 10.43, 0.20,),
    (8, 6, 1, 50, 200, 51.75, 13.27, 0.26,),
    (8, 6, 2, 50, 200, 49.13, 10.31, 0.21,),
    (8, 6, 3, 50, 200, 53.66, 10.77, 0.20,),
    (8, 6, 4, 50, 200, 51.14, 12.59, 0.25,),
    (8, 7, 1, 50, 200, 43.54, 9.86, 0.23,),
    (8, 7, 2, 50, 200, 50.71, 11.68, 0.23,),
    (8, 7, 3, 50, 200, 46.23, 11.01, 0.24,),
    (8, 7, 4, 50, 200, 48.36, 11.69, 0.24,),
    (9, 3, 1, 50, 200, 39.34, 10.85, 0.28,),
    (9, 3, 2, 50, 200, 52.62, 15.98, 0.30,),
    (9, 3, 3, 50, 200, 51.44, 11.00, 0.21,),
    (9, 4, 1, 50, 200, 46.34, 11.38, 0.25,),
    (9, 4, 2, 50, 200, 53.46, 12.50, 0.23,),
    (9, 4, 3, 50, 200, 45.86, 11.79, 0.26,),
    (9, 4, 4, 50, 200, 51.18, 10.86, 0.21,),
    (9, 5, 1, 50, 200, 46.70, 10.67, 0.23,),
    (9, 5, 2, 50, 200, 46.55, 14.90, 0.32,),
    (9, 5, 3, 50, 200, 50.60, 13.02, 0.26,),
    (9, 5, 4, 50, 200, 49.72, 12.58, 0.25,),
    (9, 6, 1, 50, 200, 44.69, 13.83, 0.31,),
    (9, 6, 2, 50, 200, 48.15, 13.24, 0.28,),
    (9, 6, 3, 50, 200, 53.08, 11.72, 0.22,),
    (9, 6, 4, 50, 200, 45.52, 12.99, 0.29,),
    (9, 7, 1, 50, 200, 39.07, 10.20, 0.26,),
    (9, 7, 2, 50, 200, 43.23, 9.82, 0.23,),
    (9, 7, 3, 50, 200, 46.09, 12.99, 0.28,),
    (9, 7, 4, 50, 200, 42.79, 11.07, 0.26,),
    (10, 3, 1, 50, 200, 42.43, 11.97, 0.28,),
    (10, 3, 2, 50, 200, 42.47, 12.14, 0.29,),
    (10, 3, 3, 50, 200, 49.31, 13.76, 0.28,),
    (10, 4, 1, 50, 200, 47.29, 15.06, 0.32,),
    (10, 4, 2, 50, 200, 37.86, 10.80, 0.29,),
    (10, 4, 3, 50, 200, 49.55, 12.70, 0.26,),
    (10, 4, 4, 50, 200, 44.30, 12.90, 0.29,),
    (10, 5, 1, 50, 200, 42.65, 12.67, 0.30,),
    (10, 5, 2, 50, 200, 42.74, 13.12, 0.31,),
    (10, 5, 3, 50, 200, 47.16, 11.62, 0.25,),
    (10, 5, 4, 50, 200, 46.61, 14.06, 0.30,),
    (10, 6, 1, 50, 200, 44.96, 12.41, 0.28,),
    (10, 6, 2, 50, 200, 37.14, 10.18, 0.27,),
    (10, 6, 3, 50, 200, 46.05, 14.03, 0.30,),
    (10, 6, 4, 50, 200, 50.63, 14.48, 0.29,),
    (10, 7, 1, 50, 200, 44.45, 13.82, 0.31,),
    (10, 7, 2, 50, 200, 43.34, 12.97, 0.30,),
    (10, 7, 3, 50, 200, 43.57, 13.01, 0.30,),
    (10, 7, 4, 50, 200, 45.54, 13.11, 0.29,),
]

timeParam = [
    (50, 4, 3, 1, 50, 200, 64.18, 15.18, 0.24,),
    (50, 4, 3, 2, 50, 200, 63.67, 13.59, 0.21,),
    (50, 4, 3, 3, 50, 200, 81.80, 11.11, 0.14,),
    (50, 4, 4, 1, 50, 200, 66.70, 17.81, 0.27,),
    (50, 4, 4, 2, 50, 200, 86.14, 9.73, 0.11,),
    (50, 4, 4, 3, 50, 200, 68.51, 13.02, 0.19,),
    (50, 4, 4, 4, 50, 200, 78.00, 12.90, 0.17,),
    (50, 6, 3, 1, 50, 200, 59.46, 14.43, 0.24,),
    (50, 6, 3, 2, 50, 200, 78.95, 13.29, 0.17,),
    (50, 6, 3, 3, 50, 200, 70.53, 14.54, 0.21,),
    (50, 6, 4, 1, 50, 200, 71.62, 12.10, 0.17,),
    (50, 6, 4, 2, 50, 200, 77.61, 17.95, 0.23,),
    (50, 6, 4, 3, 50, 200, 78.50, 13.47, 0.17,),
    (50, 6, 4, 4, 50, 200, 70.04, 13.73, 0.20,),
    (50, 6, 5, 1, 50, 200, 62.73, 13.07, 0.21,),
    (50, 6, 5, 2, 50, 200, 82.90, 8.67, 0.10,),
    (50, 6, 5, 3, 50, 200, 77.69, 12.24, 0.16,),
    (50, 6, 5, 4, 50, 200, 75.34, 10.13, 0.13,),
    (50, 6, 6, 1, 50, 200, 74.45, 14.37, 0.19,),
    (50, 6, 6, 2, 50, 200, 83.75, 12.86, 0.15,),
    (50, 6, 6, 3, 50, 200, 75.00, 12.53, 0.17,),
    (50, 6, 6, 4, 50, 200, 72.26, 17.18, 0.24,),
    (50, 8, 3, 1, 50, 200, 63.21, 12.60, 0.20,),
    (50, 8, 3, 2, 50, 200, 79.80, 11.05, 0.14,),
    (50, 8, 3, 3, 50, 200, 78.01, 16.33, 0.21,),
    (50, 8, 4, 1, 50, 200, 56.69, 13.91, 0.25,),
    (50, 8, 4, 2, 50, 200, 80.99, 10.81, 0.13,),
    (50, 8, 4, 3, 50, 200, 76.73, 13.44, 0.18,),
    (50, 8, 4, 4, 50, 200, 69.97, 13.77, 0.20,),
    (50, 8, 5, 1, 50, 200, 60.63, 11.98, 0.20,),
    (50, 8, 5, 2, 50, 200, 65.93, 12.92, 0.20,),
    (50, 8, 5, 3, 50, 200, 78.63, 11.00, 0.14,),
    (50, 8, 5, 4, 50, 200, 75.47, 12.31, 0.16,),
    (50, 8, 6, 1, 50, 200, 76.07, 11.56, 0.15,),
    (50, 8, 6, 2, 50, 200, 71.22, 12.22, 0.17,),
    (50, 8, 6, 3, 50, 200, 72.45, 15.54, 0.21,),
    (50, 8, 6, 4, 50, 200, 80.22, 12.98, 0.16,),
    (50, 8, 7, 1, 50, 200, 58.41, 18.17, 0.31,),
    (50, 8, 7, 2, 50, 200, 79.55, 11.94, 0.15,),
    (50, 8, 7, 3, 50, 200, 80.89, 12.78, 0.16,),
    (50, 8, 7, 4, 50, 200, 79.75, 9.92, 0.12,),
    (50, 9, 3, 1, 50, 200, 64.45, 14.73, 0.23,),
    (50, 9, 3, 2, 50, 200, 80.98, 11.88, 0.15,),
    (50, 9, 3, 3, 50, 200, 71.11, 13.17, 0.19,),
    (50, 9, 4, 1, 50, 200, 65.94, 14.91, 0.23,),
    (50, 9, 4, 2, 50, 200, 72.10, 16.47, 0.23,),
    (50, 9, 4, 3, 50, 200, 72.11, 16.18, 0.22,),
    (50, 9, 4, 4, 50, 200, 79.18, 15.25, 0.19,),
    (50, 9, 5, 1, 50, 200, 60.35, 12.42, 0.21,),
    (50, 9, 5, 2, 50, 200, 73.90, 14.21, 0.19,),
    (50, 9, 5, 3, 50, 200, 75.77, 13.86, 0.18,),
    (50, 9, 5, 4, 50, 200, 76.82, 10.78, 0.14,),
    (50, 9, 6, 1, 50, 200, 60.00, 13.50, 0.22,),
    (50, 9, 6, 2, 50, 200, 62.20, 14.64, 0.24,),
    (50, 9, 6, 3, 50, 200, 86.60, 10.56, 0.12,),
    (50, 9, 6, 4, 50, 200, 77.79, 10.50, 0.13,),
    (50, 9, 7, 1, 50, 200, 61.65, 12.11, 0.20,),
    (50, 9, 7, 2, 50, 200, 76.14, 11.67, 0.15,),
    (50, 9, 7, 3, 50, 200, 73.00, 14.88, 0.20,),
    (50, 9, 7, 4, 50, 200, 83.74, 10.60, 0.13,),
    (50, 10, 3, 1, 50, 200, 69.40, 11.90, 0.17,),
    (50, 10, 3, 2, 50, 200, 74.45, 11.53, 0.15,),
    (50, 10, 3, 3, 50, 200, 77.83, 14.37, 0.18,),
    (50, 10, 4, 1, 50, 200, 77.47, 11.32, 0.15,),
    (50, 10, 4, 2, 50, 200, 69.02, 13.73, 0.20,),
    (50, 10, 4, 3, 50, 200, 74.47, 13.34, 0.18,),
    (50, 10, 4, 4, 50, 200, 87.36, 11.01, 0.13,),
    (50, 10, 5, 1, 50, 200, 67.49, 14.35, 0.21,),
    (50, 10, 5, 2, 50, 200, 69.36, 14.12, 0.20,),
    (50, 10, 5, 3, 50, 200, 77.31, 12.99, 0.17,),
    (50, 10, 5, 4, 50, 200, 74.56, 13.55, 0.18,),
    (50, 10, 6, 1, 50, 200, 83.22, 10.42, 0.13,),
    (50, 10, 6, 2, 50, 200, 71.86, 12.14, 0.17,),
    (50, 10, 6, 3, 50, 200, 77.46, 13.64, 0.18,),
    (50, 10, 6, 4, 50, 200, 81.92, 12.57, 0.15,),
    (50, 10, 7, 1, 50, 200, 68.12, 10.89, 0.16,),
    (50, 10, 7, 2, 50, 200, 67.04, 13.06, 0.19,),
    (50, 10, 7, 3, 50, 200, 70.85, 14.02, 0.20,),
    (50, 10, 7, 4, 50, 200, 79.76, 11.76, 0.15,),
]

timeParam_size100 = [
    (100, 4, 3, 1, 100, 200, 86.74, 12.32, 0.14,),
    (100, 4, 3, 2, 100, 200, 87.88, 11.10, 0.13,),
    (100, 4, 3, 3, 100, 200, 81.77, 13.13, 0.16,),
    (100, 4, 4, 1, 100, 200, 78.94, 12.66, 0.16,),
    (100, 4, 4, 2, 100, 200, 82.09, 12.33, 0.15,),
    (100, 4, 4, 3, 100, 200, 83.41, 10.61, 0.13,),
    (100, 4, 4, 4, 100, 200, 82.85, 10.93, 0.13,),
    (100, 6, 3, 1, 100, 200, 80.46, 12.51, 0.16,),
    (100, 6, 3, 2, 100, 200, 83.92, 11.35, 0.14,),
    (100, 6, 3, 3, 100, 200, 84.30, 11.93, 0.14,),
    (100, 6, 4, 1, 100, 200, 81.15, 12.28, 0.15,),
    (100, 6, 4, 2, 100, 200, 84.46, 12.39, 0.15,),
    (100, 6, 4, 3, 100, 200, 84.95, 12.35, 0.15,),
    (100, 6, 4, 4, 100, 200, 84.51, 10.67, 0.13,),
    (100, 6, 5, 1, 100, 200, 81.15, 11.90, 0.15,),
    (100, 6, 5, 2, 100, 200, 82.45, 10.97, 0.13,),
    (100, 6, 5, 3, 100, 200, 83.40, 11.89, 0.14,),
    (100, 6, 5, 4, 100, 200, 84.75, 11.22, 0.13,),
    (100, 6, 6, 1, 100, 200, 78.11, 12.27, 0.16,),
    (100, 6, 6, 2, 100, 200, 83.89, 9.31, 0.11,),
    (100, 6, 6, 3, 100, 200, 80.84, 11.90, 0.15,),
    (100, 6, 6, 4, 100, 200, 81.76, 10.98, 0.13,),
    (100, 8, 3, 1, 100, 200, 79.25, 11.73, 0.15,),
    (100, 8, 3, 2, 100, 200, 84.87, 11.46, 0.14,),
    (100, 8, 3, 3, 100, 200, 82.93, 12.71, 0.15,),
    (100, 8, 4, 1, 100, 200, 81.22, 11.06, 0.14,),
    (100, 8, 4, 2, 100, 200, 80.30, 12.88, 0.16,),
    (100, 8, 4, 3, 100, 200, 83.84, 11.25, 0.13,),
    (100, 8, 4, 4, 100, 200, 83.22, 11.50, 0.14,),
    (100, 8, 5, 1, 100, 200, 79.51, 11.76, 0.15,),
    (100, 8, 5, 2, 100, 200, 81.97, 11.91, 0.15,),
    (100, 8, 5, 3, 100, 200, 83.21, 11.20, 0.13,),
    (100, 8, 5, 4, 100, 200, 81.69, 12.76, 0.16,),
    (100, 8, 6, 1, 100, 200, 80.57, 9.03, 0.11,),
    (100, 8, 6, 2, 100, 200, 75.43, 13.89, 0.18,),
    (100, 8, 6, 3, 100, 200, 80.15, 12.63, 0.16,),
    (100, 8, 6, 4, 100, 200, 82.49, 12.73, 0.15,),
    (100, 8, 7, 1, 100, 200, 78.29, 11.43, 0.15,),
    (100, 8, 7, 2, 100, 200, 80.71, 10.41, 0.13,),
    (100, 8, 7, 3, 100, 200, 76.34, 13.41, 0.18,),
    (100, 8, 7, 4, 100, 200, 82.87, 10.05, 0.12,),
    (100, 9, 3, 1, 100, 200, 78.87, 12.07, 0.15,),
    (100, 9, 3, 2, 100, 200, 78.21, 13.14, 0.17,),
    (100, 9, 3, 3, 100, 200, 81.29, 13.52, 0.17,),
    (100, 9, 4, 1, 100, 200, 76.79, 13.39, 0.17,),
    (100, 9, 4, 2, 100, 200, 81.85, 11.89, 0.15,),
    (100, 9, 4, 3, 100, 200, 83.58, 10.77, 0.13,),
    (100, 9, 4, 4, 100, 200, 79.20, 12.83, 0.16,),
    (100, 9, 5, 1, 100, 200, 79.81, 11.24, 0.14,),
    (100, 9, 5, 2, 100, 200, 80.83, 11.14, 0.14,),
    (100, 9, 5, 3, 100, 200, 81.91, 11.56, 0.14,),
    (100, 9, 5, 4, 100, 200, 82.02, 12.08, 0.15,),
    (100, 9, 6, 1, 100, 200, 77.47, 11.97, 0.15,),
    (100, 9, 6, 2, 100, 200, 79.32, 12.32, 0.16,),
    (100, 9, 6, 3, 100, 200, 79.25, 11.89, 0.15,),
    (100, 9, 6, 4, 100, 200, 81.71, 11.05, 0.14,),
    (100, 9, 7, 1, 100, 200, 78.64, 11.31, 0.14,),
    (100, 9, 7, 2, 100, 200, 79.07, 11.39, 0.14,),
    (100, 9, 7, 3, 100, 200, 80.97, 10.93, 0.13,),
    (100, 9, 7, 4, 100, 200, 78.71, 12.45, 0.16,),
    (100, 10, 3, 1, 100, 200, 77.83, 11.65, 0.15,),
    (100, 10, 3, 2, 100, 200, 76.61, 11.47, 0.15,),
    (100, 10, 3, 3, 100, 200, 84.00, 11.06, 0.13,),
    (100, 10, 4, 1, 100, 200, 79.00, 11.80, 0.15,),
    (100, 10, 4, 2, 100, 200, 79.31, 11.09, 0.14,),
    (100, 10, 4, 3, 100, 200, 79.86, 12.99, 0.16,),
    (100, 10, 4, 4, 100, 200, 81.62, 12.05, 0.15,),
    (100, 10, 5, 1, 100, 200, 77.71, 13.22, 0.17,),
    (100, 10, 5, 2, 100, 200, 76.63, 13.07, 0.17,),
    (100, 10, 5, 3, 100, 200, 80.83, 11.37, 0.14,),
    (100, 10, 5, 4, 100, 200, 80.07, 12.41, 0.15,),
    (100, 10, 6, 1, 100, 200, 79.16, 11.48, 0.15,),
    (100, 10, 6, 2, 100, 200, 79.13, 12.37, 0.16,),
    (100, 10, 6, 3, 100, 200, 78.83, 12.09, 0.15,),
    (100, 10, 6, 4, 100, 200, 80.14, 10.13, 0.13,),
    (100, 10, 7, 1, 100, 200, 76.91, 12.01, 0.16,),
    (100, 10, 7, 2, 100, 200, 77.28, 12.51, 0.16,),
    (100, 10, 7, 3, 100, 200, 77.25, 12.41, 0.16,),
    (100, 10, 7, 4, 100, 200, 81.79, 10.53, 0.13,),
]

leaderRepeatsRW = {
    0: (74.21, 13.50),
    4: (75.60, 11.82),
    8: (75.71, 13.36),
    9: (78.00, 12.47),
    10: (77.74, 11.80),
    11: (76.73, 12.60),
    12: (78.54, 12.50),
    13: (77.26, 11.99),
    14: (80.68, 10.50),
    15: (80.20, 10.20),
    16: (79.29, 11.01),
    20: (76.58, 12.60),
}


def sortTimeParamOld():
    return sortTimeParam(5)


def sortForParam(parm=1, paramName='', sortParameters=None):
    if paramName:
        print(paramName)
    if sortParameters is None:
        sortParameters = timeParam

    paramToResult = defaultdict(list)
    for t in sortParameters:
        paramToResult[t[parm]].append(t)

    for k, v in paramToResult.items():
        print(f"Values for {k}")
        sortTimeParam(sortParameters=v, space=False)
        print()


def sortTimeParam(sortPos=6, sortParameters=None, space=True):
    if sortParameters is None:
        sortParameters = timeParam

    sortedTime = sorted(sortParameters, reverse=True, key=itemgetter(sortPos))
    if space:
        pprint(sortedTime[:10])
        print()
        pprint(sortedTime[10:])
    else:
        pprint(sortedTime)


leaderRepeats = {
    4: (47.25, 11.79),
    5: (51.04, 12.26),
    6: (51.19, 10.93),
    7: (53.48, 11.31),
    8: (50.93, 10.06),
    9: (50.48, 11.61),
    10: (50.27, 12.02),
    11: (49.03, 10.53),
    12: (42.99, 9.55),
    16: (41.49, 10.16),
    20: (41.55, 11.05),
}

if __name__ == '__main__':
    sortForParam(1, paramName="routing table time")
    sortForParam(2, paramName="tc")
    sortForParam(3, paramName="hello")

    # sortForParam(1, paramName="routing table time", sortParameters=timeParam_size100)
    # sortForParam(2, paramName="tc", sortParameters=timeParam_size100)
    # sortForParam(3, paramName="hello", sortParameters=timeParam_size100)
    # sortTimeParam()
    # drawImage()
